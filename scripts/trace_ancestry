from ete3 import Tree, NodeStyle, TreeStyle
import waterfall
from waterfall import vault
from collections import defaultdict
import math
import numpy as np


log_weights = defaultdict(list)


def RGB_to_hex(RGB):
    """ [255,255,255] -> "#FFFFFF" """
    # Components need to be integers for hex to make sense
    RGB = [int(x) for x in RGB]
    return "#" + "".join(
        ["0{0:x}".format(v) if v < 16 else "{0:x}".format(v) for v in RGB]
    )


def trace(node, parent):
    new_node = node.add_child()
    cont = True if parent.copies > 0 else False
    new_node.add_features(stage=parent.stage, log_weight=parent.work, cont=cont)
    log_weights[parent.stage].append(parent.work)
    for child in parent.children:
        trace(new_node, child)


def normalize(value, min_, max_):
    delta = max_ - min_
    if delta == 0.0:
        norm = 1.0
    else:
        norm = (value - min_) / delta
    return 1.0 - norm


def color(value):
    return RGB_to_hex((200, 200 * value, 200 * value))


def main():
    w = waterfall.Waterfall.load()
    store = vault.connect_db_readonly(w)

    root = Tree()
    root.add_features(stage=-1, log_weight=0.0, cont=True)

    starts = store.get_traj_starts()
    for start in starts:
        trace(root, start)

    # compute the range of log_weights
    max_log_weights = {}
    min_log_weights = {}
    for key in log_weights:
        max_log_weights[key] = np.max(log_weights[key])
        min_log_weights[key] = np.min(log_weights[key])

    for n in root.traverse():
        if n.cont or n.stage == (w.n_stages - 1):
            n.img_style["fgcolor"] = color(
                # normalize(n.log_weight, min_log_weights[n.stage], max_log_weights[n.stage])
                normalize(
                    n.log_weight,
                    np.min(list(min_log_weights.values())),
                    np.max(list(max_log_weights.values())),
                )
            )
        else:
            n.img_style["fgcolor"] = "black"

    style = TreeStyle()
    style.rotation = 90
    root.show(tree_style=style)


if __name__ == "__main__":
    main()
